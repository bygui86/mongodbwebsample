
buildscript {
	ext {
		springBootVersion = "1.5.6.RELEASE"
		// springBootVersion = "2.0.0.M3"
		aptVersion="0.12"
		lombokVersion="1.16.18"
		jodaVersion="2.9.9"
		mapstructVersion="1.1.0.Final"
		jacksonVersion="2.8.9"
		// jacksonVersion="2.9.1"
	}
	
	repositories {
		mavenCentral()
		
		// Repo for Spring Boot [release-candidates|milestones]
		// maven { url "https://repo.spring.io/snapshot" }
		// maven { url "https://repo.spring.io/milestone" }
		
		// Repo for gradle-apt-plugin
		maven { url "https://plugins.gradle.org/m2/" }
	}
	
	dependencies {
		// Spring Boot gradle plugin
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		
		// gradle-apt-plugin - making it easier/safer to use Java annotation processors
		classpath("net.ltgt.gradle:gradle-apt-plugin:${aptVersion}")
	}
}


apply plugin: "java"
apply plugin: "eclipse"
// Spring Boot gradle plugin [stable]
apply plugin: "org.springframework.boot"
// Spring Boot gradle plugin [release-candidates|milestones]
// apply plugin: "io.spring.dependency-management"
// gradle-apt-plugin
apply plugin: "net.ltgt.apt"


sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
jar {
    baseName = "rs-mongodbweb"
    version =  "0.1"
}


compileJava {
	// MapSruct specific configs
	options.compilerArgs = [
//		"-Amapstruct.suppressGeneratorTimestamp=true",
//		"-Amapstruct.suppressGeneratorVersionInfoComment=true",
		"-Amapstruct.unmappedTargetPolicy=IGNORE",
		"-Amapstruct.defaultComponentModel=spring"
	]
}


sourceSets {
	main {
		java {
			// Generate MapStruct code into "gensrc/main" folder
			delete "${projectDir}/gensrc/main"
			output.generatedSourcesDir = "${projectDir}/gensrc/main"
		}
	}
	test {
		java {
			// Generate MapStruct test code into "gensrc/test" folder
			delete "${projectDir}/gensrc/test"
			output.generatedSourcesDir = "${projectDir}/gensrc/test"
		}
	}
}


repositories {
	mavenCentral()
	
	// Repo for Spring Boot [release-candidates|milestones]
	// maven { url "https://repo.spring.io/snapshot" }
	// maven { url "https://repo.spring.io/milestone" }
	
	// Repo for gradle-apt-plugin
	maven { url "https://plugins.gradle.org/m2/" }
}


dependencies {

	// Spring DevTools (Boot)
	compile("org.springframework.boot:spring-boot-starter")
	runtime("org.springframework.boot:spring-boot-devtools")

	// Spring Data starter for MongoDB
	compile("org.springframework.boot:spring-boot-starter-data-mongodb")
	// Spring Data starter for reactive MongoDB
	// compile("org.springframework.boot:spring-boot-starter-data-mongodb-reactive")
	
	// Spring REST + HATEOAS
	// compile('org.springframework.boot:spring-boot-starter-data-rest')
	
	// Spring Web (including REST + HATEOAS ?)
	compile('org.springframework.boot:spring-boot-starter-web')
	// Spring Reactive Web
	// compile('org.springframework.boot:spring-boot-starter-webflux')
	
	
	// Lombok
	compileOnly("org.projectlombok:lombok:${lombokVersion}")
	
	// Joda time
	compile("joda-time:joda-time:${jodaVersion}")
	
	// MapStruct
	compile("org.mapstruct:mapstruct-jdk8:${mapstructVersion}")
	
	// FasterXML Jackson
	compile("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
	
	
    // gradle-apt-plugin
	apt("org.projectlombok:lombok:${lombokVersion}")
	apt("org.mapstruct:mapstruct-processor:${mapstructVersion}")


	// Testing
	testCompile("org.springframework.boot:spring-boot-starter-test")
	testCompile("org.mapstruct:mapstruct-jdk8:${mapstructVersion}")
	testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
}
